let ethAddress,contract;function getJson(){return new Promise(e=>{$.getJSON("../PolygonForest.json",t=>{e(t)})})}async function updateBalance(){let e=await contract.methods.getLogBalance().call({from:ethAddress});$("#logs").text(`Your logs: ${e}`),e>0?$("#btn-sell").attr("disabled",!1):$("#btn-sell").attr("disabled",!0)}async function updateForest(){let e=await contract.methods.getForestSize().call({from:ethAddress});$("#forest-size").text(`Trees in the Polygon Forest: ${e}`)}async function chop(e){if(0==await contract.methods.getForestSize().call({from:ethAddress}))alert("There are no trees right now! Trees replant after every tool sale");else{const t=e.target.getAttribute("data-tool-id");contract.methods.chop(t).send({from:ethAddress,value:"0"}).once("error",e=>{console.log(e)}).then(async o=>{console.log(o);let a=await contract.methods.getTool(t).call({from:ethAddress});updateTime($(e.target).parent().parent(),a.nextReady),updateBalance(),updateForest()})}}function cashout(){contract.methods.cashout().send({from:ethAddress,value:"0"}).once("error",e=>{console.log(e)}).then(async e=>{console.log(e),updateBalance(),alert("Successfully sold your logs!")})}function getRemaining(e){let t=new Date,o=new Date(1e3*e);if(t>=o)return"Ready";let a=(o.getTime()-t.getTime())/1e3;return`${Math.floor(a/3600).toString().padStart(2,"0")}:${Math.floor(a%3600/60).toString().padStart(2,"0")}:${Math.floor(a%60).toString().padStart(2,"0")}`}function updateTime(e,t){const o=e.find(".btn-chop")[0];if("Ready"!=t&&"Ready"!=getRemaining(t)){$(o).attr("disabled",!0);const a=e.find(".tool-item-ready")[0];$(a).text(`Tool Ready: ${getRemaining(t)}`),setTimeout(()=>updateTime(e,t),1e3)}else $(o).attr("disabled",!1)}async function start(){updateForest(),updateBalance(),$("#btn-sell").click(cashout);let e=await contract.methods.getOwnedTools(ethAddress).call({from:ethAddress});if(0==e.length)$("body").append('<p>You don\'t have any tools!<br>Head to the <a href="../market">Market</a> to get one</p>');else{for(tool of e){let e;switch(tool.model){case"0":e="Hatchet";break;case"1":e="Axe";break;case"2":e="Saw";break;case"3":e="Chainsaw"}const t=$(`\n      <div id="tools-container">\n        <div class="tool-item">\n          <img class="tool-item-img" src="../assets/${e}.png">\n          <p class="tool-item-name">${e}</p>\n          <p>Chop Time: ${tool.chopTime/60} minutes</p>\n          <p>Logs per chop: ${tool.logsPerChop}</p>\n          <p class="tool-item-ready">Tool Ready: ${getRemaining(tool.nextReady)}</p>\n          <button class="btn-chop" disabled="${"Ready"===getRemaining(tool.nextReady)}" data-tool-id="${tool.id}">Chop</button>\n        </div>\n      </div>\n      `);$("#tools-container").append(t),updateTime(t,tool.nextReady)}$(".btn-chop").click(chop)}}const connect=async()=>{if(window.ethereum){await window.ethereum.send("eth_requestAccounts");let e=new Web3(window.ethereum);try{const t=await window.ethereum.request({method:"eth_accounts"});if(t.length>0){const o=await window.ethereum.request({method:"eth_chainId"}),a=await getJson();137==o?(contract=new e.eth.Contract(a.abi,"0xb290dc212bc126627ba4939f7e63c4db41a6ea90"),ethAddress=t[0],start(),window.ethereum.on("accountsChanged",e=>{ethAddress=e[0]}),window.ethereum.on("chainChanged",()=>{window.location.reload()})):alert("Please change your network to Polygon")}else alert("Please sign in to your wallet")}catch(e){alert("Something went wrong (Check console for details)",e)}}else alert("Please install metamask")};connect(),$(document).ready(()=>{$("#btn-sell").attr("disabled",!0)});